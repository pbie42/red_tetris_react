import { expect } from 'chai'
import {
	calcPieceEnd,
	calcPieceStart,
	calcPieceBottom,
	calcOffsets,
	checkGame,
	checkLines,
	clearLines,
	newBoard
} from '../../src/client/utils'

let blankBoard = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

let boardToClear = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 'z', 0, 0, 0, 0],
	['z', 'z', 0, 0, 0, 'z', 'z', 0, 0, 0, 0],
	[0, 'z', 'z', 0, 0, 'z', 'l', 0, 't', 0, 0],
	['i', 'i', 'i', 'i', 'l', 'l', 'l', 't', 't', 't', 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
let boardToClearCopy = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 'z', 0, 0, 0, 0],
	['z', 'z', 0, 0, 0, 'z', 'z', 0, 0, 0, 0],
	[0, 'z', 'z', 0, 0, 'z', 'l', 0, 't', 0, 0],
	['i', 'i', 'i', 'i', 'l', 'l', 'l', 't', 't', 't', 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

let clearedBoard = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 'z', 0, 0, 0, 0],
	['z', 'z', 0, 0, 0, 'z', 'z', 0, 0, 0, 0],
	[0, 'z', 'z', 0, 0, 'z', 'l', 0, 't', 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

let gameOverBoard = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 'j', 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 't', 't', 't', 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 't', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 'l', 'l', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'l', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'l', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 'j', 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0]
]

let gameGoodBoard = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 't', 't', 't', 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 't', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 'l', 'l', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'l', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'l', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 'j', 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'j', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 'i', 0, 0, 0, 0, 0]
]

describe('Game Utils', () => {
	let shape = [[0, 0, 0, 0], [0, 0, 0, 0], ['i', 'i', 'i', 'i'], [0, 0, 0, 0]]
	describe('calcPieceEnd', () => {
		it('the last instance of the piece from the left side of the shape matrix', () => {
			const pieceEnd = calcPieceEnd(shape, 'i')
			expect(pieceEnd).to.equal(3)
		})
	})

	describe('calcPieceStart', () => {
		it('finds the first instance of the piece from the left side of the shape matrix', () => {
			const pieceStart = calcPieceStart(shape, 'i')
			expect(pieceStart).to.equal(0)
		})
	})

	describe('calcPieceBottom', () => {
		it('finds the first instance of the piece from the left side of the shape matrix', () => {
			const pieceBottom = calcPieceBottom(shape, 'i')
			expect(pieceBottom).to.equal(2)
		})
	})

	describe('calcOffsets', () => {
		it('gets the piece start and piece end', () => {
			const offsets = calcOffsets(shape, 'i')
			expect(offsets.start).to.equal(0)
			expect(offsets.end).to.equal(3)
		})
	})

	describe('checkGame', () => {
		it('returns false if no pieces have broken top threshold', () => {
			const result = checkGame(gameGoodBoard)
			expect(result).to.be.false
		})
		it('returns true if a piece has broken top threshold', () => {
			const result = checkGame(gameOverBoard)
			expect(result).to.be.true
		})
	})

	describe('checkLines', () => {
		it('clears lines if there are lines to clear', () => {
			const result = checkLines(boardToClear)
			expect(result).to.eql(clearedBoard)
		})
		it('returns an unchanged board if there are no lines to clear', () => {
			const result = checkLines(clearedBoard)
			expect(result).to.eql(clearedBoard)
		})
	})

	describe('clearLines', () => {
		it('removes specified lines from board and replaces with new ones', () => {
			const result = clearLines([23], boardToClearCopy)
			expect(result).to.eql(clearedBoard)
		})
		it('returns the same board if no lines specified', () => {
			const result = clearLines([], boardToClear)
			expect(result).to.eql(boardToClear)
		})
	})

	describe('newBoard', () => {
		it('returns an empty board', () => {
			const result = newBoard()
			expect(result).to.eql(blankBoard)
		})
	})
})
